<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.demo.mapper.UserMapper">
    <!-- 手动开启 mybatis 二级缓存 -->
    <cache/>
    <!--
        sql 片段：将多个 sql 脚本中的一些公共的 sql 语句抽取出来，定义成公共的片段，
        在需要 sql 语句中引入 <include refid="sqlUser"/>
     -->
    <sql id="sqlUser">
        id,user_name,name,age,birthday,sex
    </sql>

    <select id="selectUser" resultType="User">
        <!--
        // 报错
        select * from tb_user where name like '%#{name}%' and age &gt; #{age} and sex = #{sex}
        // 正确查找，但是容易被 sql 注入攻击
        select * from tb_user where name like '%${name}%' and age &gt; #{age} and sex = #{sex}
        -->
        <!-- bind 标签允许创建一个变量，并将其绑定到当前的上下文 -->
        <bind name="username" value="'%' + name +'%'"/>
        select * from tb_user where name like #{username} and age &gt; #{age} and sex = #{sex}
    </select>

    <select id="selectUser2" parameterType="map" resultType="User">
        <bind name="username" value="'%' + name +'%'"/>
        select *
        from tb_user
        where name like #{username}
           and age = #{age}
        and sex = #{sex}
    </select>

    <!--
        mybatis 的输出参数类型主要针对的查询结果集的处理 ，针对 增删改 的操作，输出参数的数据类型通常是 Integer
        resultType 输出结果的数据类型一般是：pojo，基本数据类型，集合（书写的是集合中封装对象的所属类型）
        输出的参数是基本类型、集合类型（其中泛型不是自定义类型），可以省略不写。
    -->
    <select id="selectUserById" parameterType="map" resultType="User">
        select
        <include refid="sqlUser"/>
        from tb_user where id = #{id}
    </select>

    <!--
        resultMap：配置 mybatis 查询的复杂处理
            id：当前 resultMap 标签的唯一标识，用于标识一个结果映射。在 select 标签中通过 resultMap="userMap" 属性来引用
            type：当前 resultMap 标签查询的结果封装到具体 pojo 的类型
            autoMapping：数据库查询结果集中的列名与 pojo 类的属性名相匹配，或者设置了驼峰命名规则相互转换，自动映射
     -->
    <resultMap id="userMap" type="User" autoMapping="true">
        <!--
            <id /> 标签用来配置查询的结果中主键与 pojo 类中对应的属性
                property：pojo 类中的属性
                column：数据库表中的列名
            <resul />  标签用来配置表中其他列与 pojo 类中属性的关系
        -->
        <id property="id" column="id"/>
        <result column="uname" property="userName"/>
        <result column="s" property="sex"/>
        <result column="a" property="age"/>
    </resultMap>

    <!--
        resultMap：用来处理查询结果集的映射关系
        在查询的 sql 标签上使用 resultMap 可以解决：
            1. 列名与属性名不一致问题
            2. 一对一查询
            3. 一对多查询
            4. 多对多查询

        在进行多表联合查询时，结果集中会包含多个表的列，
        此时需要通过 resultMap 来定义这些列如何映射到 Java 对象中，
        可能还需要使用 association 或 collection 来处理对象之间的关联关系。
            association: 用于映射复杂类型的属性，比如 Java 对象中包含另一个 Java 对象。
            collection: 用于映射集合类型的属性，比如 Java 对象中包含一个集合（List、Set等）。
    -->
    <select id="selectAll" resultMap="userMap">
        select id, user_name as uname, age as a, sex as s, name, birthday
        from tb_user
    </select>

    <!--
        假设现在以 name age sex 进行条件查询，有可能三个参数都传递，有可能只传递部分参数，也有可能都不传递。
        那么就要用到 mybatis 提供的动态 sql 解决动态参数的问题。
    -->
    <select id="dynamicUser" parameterType="map" resultType="User">
        select * from tb_user
        <where>
            <!-- trim 标签去掉空格 -->
            <trim>
                <!-- if 标签来判断是否拼接这条 sql，test 属性用来写 if 条件 -->
                <if test="age != null and age != 0">
                    or age = #{age}
                </if>
            </trim>
            <trim>
                <if test="sex != null and sex &gt; 0 and sex &lt; 3">
                    and sex = #{sex}
                </if>
            </trim>
        </where>
    </select>

    <!-- 动态传参更新用户信息 -->
    <update id="updateUser" parameterType="map">
        update tb_user
        <set>
            <if test="name != null and name != ''">
                name = #{name},
            </if>
            <if test="age != null and age != 0">
                age = #{age},
            </if>
            <if test="sex != null and sex &gt; 0 and sex &lt; 3">
                sex = #{sex},
            </if>
        </set>
        where id = #{id}
    </update>

    <!--
        查询满足 id 在一个区间内的用户信息
        select * from tb_user where id in ( id1, id2, id3,...... );
    -->
    <select id="findIds" parameterType="list" resultType="User">
        select * from tb_user
        <where>
            <!--
                foreach 标签：
                动态 SQL 对集合进行遍历
                collection：集合
                item：集合中的每一项
                open：开头的字符串
                separator：分隔符
                close：结尾的字符串
            -->
            <foreach collection="ids" item="item" open="id in (" separator="," close=")" >
                #{item}
            </foreach>
        </where>
    </select>

    <!-- choose 标签：传入多个条件，只选择其中一个条件，相当于 switch 语句-->
    <select id="chooseUser" parameterType="map" resultType="User">
        select * from tb_user
        <where>
            <choose>
                <when test="name != null and name != ''">
                    name = #{name}
                </when>
                <when test="age != null and age != 0">
                    age = #{age}
                </when>
                <when test="sex != null and sex &gt; 0 and sex &lt; 3">
                    sex = #{sex}
                </when>
                <otherwise>
                    id = #{id}
                </otherwise>
            </choose>
        </where>
    </select>

    <!-- 根据 id 删除用户信息 -->
    <delete id="deleteUserById">
        delete from tb_user where id = #{id}
    </delete>
</mapper>